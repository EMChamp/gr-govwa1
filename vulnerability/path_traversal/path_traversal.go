package path_traversal

import (
	"io"
	"log"
	"net/http"
	"os"

	"github.com/julienschmidt/httprouter"

	"github.com/govwa/util"
	"github.com/govwa/util/middleware"
)

type PathTraversal struct {
	Name string
}

func New() PathTraversal {
	return PathTraversal{}
}

func (self PathTraversal) SetRouter(r *httprouter.Router) {
	mw := middleware.New()
	r.GET("/path-traversal", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(pathHandler))))
	r.POST("/path-traversal", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(pathHandler))))
}

func pathHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	data := make(map[string]interface{})
	defer util.SafeRender(w, r, "template.path-traversal", data)

	if r.Method == "POST" {
		err := r.ParseMultipartForm(32 << 20) // maxMemory
		if err != nil {
			log.Printf("%+v\n", err)
			data["error"] = err.Error()
			return
		}

		file, handler, err := r.FormFile("file")
		if err != nil {
			log.Printf("%+v\n", err)
			data["error"] = err.Error()
			return
		}

		defer file.Close()

		path := "./uploads/" + handler.Filename
		f, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE, 0666)
		if err != nil {
			log.Printf("%+v\n", err)
			data["error"] = err.Error()
			return
		}

		io.Copy(f, file)
		f.Close()

		go func() {

		}()

		info, err := os.Stat(path)
		if err != nil {
			log.Printf("%+v\n", err)
			data["error"] = err.Error()
			return
		}

		data["upload_size"] = info.Size()
	}

}
