package sqli

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	// /"github.com/govwa/user/session"
	"github.com/govwa/util"
	"github.com/govwa/util/database"
	"github.com/govwa/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (self SQLI) SetRouter(r *httprouter.Router) {

	mw := middleware.New()
	r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) //not use logger due to sqlmap request
	r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	uid_cookie, err := r.Cookie("Uid")
	if err != nil {
		panic(err)
	}

	uid := uid_cookie.Value

	p := NewProfile()

	data := make(map[string]interface{}) //data to send to client

	if !util.CheckLevel(r) { //level == low
		var DB *sql.DB
		DB, err = database.Connect()
		getProfileSql := fmt.Sprintf(`SELECT p.user_id, p.full_name, p.city, p.phone_number 
									FROM Profile as p,Users as u 
									where p.user_id = u.id 
									and u.id=%s`, uid)
		rows, err := DB.Query(getProfileSql)
		if err != nil {
			data["error"] = err.Error()
		} else {
			defer rows.Close()
			for rows.Next() {
				err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
				if err != nil {
					data["error"] = err.Error()
					break
				}
			}
		}

	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}
	data["title"] = "Sql Injection"
	data["uid"] = strconv.Itoa(p.Uid)
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber

	util.SafeRender(w, r, "template.sqli1", data)

}

func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	uid := r.FormValue("uid")

	p := NewProfile()

	data := make(map[string]interface{}) //data to send to client

	if !util.CheckLevel(r) { //level == low
		/* this funciton use to get data Profile from database with vulnerable query */
		var DB *sql.DB
		DB, err = database.Connect()
		getProfileSql := fmt.Sprintf(`SELECT p.user_id, p.full_name, p.city, p.phone_number 
									FROM Profile as p,Users as u 
									where p.user_id = u.id 
									and u.id=%s`, uid) //here is the vulnerable query
		rows, err := DB.Query(getProfileSql)
		if err != nil {
			data["error"] = err.Error()
		} else {
			defer rows.Close()
			for rows.Next() {
				err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
				if err != nil {
					data["error"] = err.Error()
					break
				}
			}
		}
		if err != nil {
			log.Printf("sql error")
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}

	data["title"] = "Sql Injection"
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber
	util.SafeRender(w, r, "template.sqli2", data)

}
