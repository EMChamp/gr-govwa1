package cmdi

import (
	"fmt"
	"net/http"
	"os/exec"
	"strings"

	"github.com/julienschmidt/httprouter"

	"github.com/govwa/util"
	"github.com/govwa/util/middleware"
)

type CMDI struct {
	Name string
}

func New() CMDI {
	return CMDI{}
}

func (self CMDI) SetRouter(r *httprouter.Router) {
	mw := middleware.New()
	r.GET("/cmdi", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(cmdiHandler))))
	r.POST("/cmdi", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(cmdiHandler))))
}

func cmdiHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	data := make(map[string]interface{})

	if r.Method == "POST" {

		search := r.FormValue("search")
		cmd := exec.Command("sh", "-c", fmt.Sprintf("rg '%s' the_sign_of_four_plaintext.txt", search))
		cmd.Dir = "./search-data"

		out, err := cmd.CombinedOutput()
		if err != nil {
			data["error"] = err
		}

		splits := strings.Split(string(out), "\n")
		end_index := len(splits) - 1
		if len(splits) > 10 {
			end_index = 10
		}

		data["out"] = splits[:end_index]
	}

	util.SafeRender(w, r, "template.cmdi", data)
}
